package training.evaluation.training.rest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import training.evaluation.training.model.Training;
import training.evaluation.training.service.ITrainingServices;
import org.springframework.http.ResponseEntity;
import training.evaluation.training.service.impl.CommonServices;

import java.util.List;
import javax.validation.Valid;

@CrossOrigin(origins = {"${origins}"})
@RestController
@RequestMapping(value = "/training")
@Api(description = "Resource to expose all available training endpoints", tags = {"TrainingResource"})
public class TrainingResource {

    @Autowired
    ITrainingServices services;

    @PostMapping("/new")
    @ApiOperation(value = "Create new training record", notes = "The training must contain Name and Level property, Description is optional. ")
    public ResponseEntity<Training> createTraining(@RequestHeader("Authorization") String authorisation, @ApiParam(value = "Training in JSON format. Name and Level are required fields, Description field is optional. ID is autogenerated.", required = true) @Valid @RequestBody Training training) {
        CommonServices.token=authorisation;
        return services.createTraining(training);
    }

    @GetMapping("/all")
    @ApiOperation(value = "Get all training records", notes = "Return list of training records")
    public ResponseEntity<Iterable<Training>> getAllTrainings(@RequestHeader("Authorization") String authorisation) {
        CommonServices.token=authorisation;
        return services.getAllTrainings();
    }

    @DeleteMapping("/delete/{id}")
    @ApiOperation(value = "Delete training record", notes = "Delete training by ID, as a path variable")
    public ResponseEntity<String> deleteTraining(@RequestHeader("Authorization") String authorisation, @ApiParam(value = "ID of the record that we need to delete", required = true) @PathVariable String id) {
        CommonServices.token=authorisation;
        return services.deleteTraining(id);
    }

    @PostMapping("/update/{id}")
    @ApiOperation(value = "Update training record", notes = "Update training by ID, as a path variable. Request body is training in JSON format with new values - Name and Level are required, Description is optional")
    public ResponseEntity<Training> updateTraining(@RequestHeader("Authorization") String authorisation, @ApiParam(value = "ID of the record that we need to update.", required = true) @PathVariable String id, @ApiParam(value = "Training object in JSON format with Name and Level as a required fields, Description field is optional", required = true) @RequestBody Training training) {
        CommonServices.token=authorisation;
        return services.updateTraining(id, training);
    }

    @GetMapping("/filterByName/{name}")
    @ApiOperation(value = "Filter training by name", notes = "Filter training by name. Return existing training record with searched name")
    public ResponseEntity<List<Training>> filterByName(@ApiParam(value = "Name of the record that we search for.", required = true) @PathVariable String name) {
        return services.findByNameStartingWith(name);
    }

    @GetMapping("/filterByLevel/{level}")
    @ApiOperation(value = "Filter training by level", notes = "Filter training by level. Return list of existing training records with searched level")
    public ResponseEntity<List<Training>> filterByLevel(@ApiParam(value = "Level of the record that we search for.", required = true) @PathVariable String level) {
        return services.filterByLevel(level);
    }

    @GetMapping("/filterByNameAndLevel/{name}/{level}")
    @ApiOperation(value = "Filter training by name and level", notes = "Filter training by name and level. Return list of existing training records with searched level that start with name field")
    public ResponseEntity<List<Training>> filterByNameAndLevel(@ApiParam(value = "Name of the record that we search for.", required = true) @PathVariable String name, @ApiParam(value = "Level of the record that we search for.", required = true) @PathVariable String level) {
        return services.findByNameStartingWithAndLevel(name, level);
    }

    @PostMapping("/uploadPicture/{name}")
    @ApiOperation(value = "Upload picture to training by name", notes = "Find training by name and upload picture")
    public ResponseEntity<Training> singleFileUpload(@ApiParam(value = "File to upload", required = true) @RequestParam("file") MultipartFile multipart, @ApiParam(value = "Name of the training that we need to upload picture", required = true) @PathVariable("name") String name) {
        return services.setTrainingPicture(multipart, name);
    }

    @GetMapping("/retrievePicture/{name}")
    @ApiOperation(value = "Retrieve picture to training by name", notes = "Find training by name and retrieve picture")
    public ResponseEntity<String> retrieveFile(@ApiParam(value = "Name of the training that we need to retrieve picture", required = true) @PathVariable("name") String name) {
        return services.getTrainingPicture(name);
    }

    @GetMapping("/filterByUserLevel")
    @ApiOperation(value = "Filter training by logged user level", notes = "Filter training by level. Return list of existing training records with level of the logged")
    public ResponseEntity<List<Training>> filterByUserLevel(@ApiParam(value = "Level of the record that we search for.", required = true) @RequestHeader(value = "Authorization") String authorizationValue) {
        return services.getAllTrainingsByUserLevel(authorizationValue);
    }
}

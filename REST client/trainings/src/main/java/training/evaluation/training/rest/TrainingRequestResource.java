package training.evaluation.training.rest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import training.evaluation.training.model.TrainingRequest;
import training.evaluation.training.service.ITrainingServices;

import java.util.List;

@CrossOrigin(origins = {"${origins}"})
@RestController
@RequestMapping(value = "/trainingRequest")
@Api(description = "Resource to expose all available training request endpoints", tags = {"TrainingResource"})
public class TrainingRequestResource {

    @Autowired
    ITrainingServices services;

    @PostMapping("/new")
    @ApiOperation(value = "Create new training request", notes = "Training request must contain user id and training id. ")
    public ResponseEntity<TrainingRequest> createNewTrainingRequest(@ApiParam(value = "Training Request in JSON format. User id and training id  are required fields, ID is autogenerated. Default status value is PENDING ", required = true) @RequestBody TrainingRequest trainingRequest) {
        return services.createTrainingRequest(trainingRequest);
    }

    @PostMapping("/approve/{trainingRequestId}")
    @ApiOperation(value = "Approve training request", notes = "Set status to approved of the training request requested by id. ")
    public ResponseEntity<TrainingRequest> approveTrainingRequest(@ApiParam(value = "Training request id as a path variable.", required = true) @PathVariable("trainingRequestId") String trainingRequestId) {
        return services.approveTrainingRequest(trainingRequestId);
    }

    @PostMapping("/cancel/{trainingRequestId}")
    @ApiOperation(value = "Cancel training request", notes = "Set status to canceled of the training request requested by id. ")
    public ResponseEntity<TrainingRequest> cancelTrainingRequest(@ApiParam(value = "Training request id as a path variable.", required = true) @PathVariable("trainingRequestId") String trainingRequestId) {
        return services.cancelTrainingRequest(trainingRequestId);
    }

    @PostMapping("/complete/{trainingRequestId}")
    @ApiOperation(value = "Complete training request", notes = "Set status to canceled of the training request requested by id. ")
    public ResponseEntity<TrainingRequest> completeTrainingRequest(@ApiParam(value = "Training request id as a path variable.", required = true) @PathVariable("trainingRequestId") String trainingRequestId) {
        return services.completeTrainingRequest(trainingRequestId);
    }

    @GetMapping("/all")
    @ApiOperation(value = "Get all training requests", notes = "Return list of all training requests")
    public ResponseEntity<List<TrainingRequest>> getAllTrainingRequests() {
        return services.getAllTrainingRequests();
    }

    @GetMapping("/allApproved")
    @ApiOperation(value = "Get all approved training requests", notes = "Return list of all approved training requests")
    public ResponseEntity<List<TrainingRequest>> getAllApprovedTrainingRequests() {
        return services.getAllApprovedTrainingRequests();
    }
}
